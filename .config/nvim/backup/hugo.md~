Hugo
=============
- [A step-by-step guide on migrating from WordPress to Hugo](https://ma.ttias.be/step-by-step-guide-migrating-wordpress-to-hugo/)
- [Hugo Guide](https://www.sitepoint.com/premium/books/a-beginner-s-guide-to-creating-a-static-website-with-hugo/read/1)
- [Gitlab Setup](https://edricteo.com/static-web-page/)

https://www.mikedane.com/static-site-generators/hugo/conditionals/

Bootstrap Themes : https://www.aerobatic.com/quickstarts/hugo/
Hugo Theme From Scratch : https://retrolog.io/blog/creating-a-hugo-theme-from-scratch/
Hugo Install : https://gohugo.io/getting-started/installing

* You have an account with GitHub, GitLab, or Bitbucket.
* You have completed the [Quick Start](https://gohugo.io/getting-started/quick-start/) or have a Hugo website you are ready to deploy and share with the world.
* You do not already have a Netlify account.

Logic: https://www.goheroe.org/2017/08/21/host-your-blog-for-free-with-hugo-github-netlify-and-cloudflare/

Steps

First Quick Start and Install on Mac - https://gohugo.io/getting-started/quick-start/

echo "# bestcameranews" >> [README.md](http://README.md)
git init
git add [README.md](http://README.md)
git commit -m "first commit"
git remote add origin https://github.com/eorus/bestcameranews.git
git push -u origin master

cd path/to/hugo-source
hugo -d path/to/bestcameranews
cd path/to/bestcameranews
git add .
git commit -m "rebuilt $now"
git push origin master


# Multi Language Content Structure

(this is an ultraquick summary. I hope to make of it a much more detailed post on my website when it goes live, but for now here it is, so othes can use it. Also, it probably contains errors or explanations that are not the best ones. Thanks in advance to whoever will improve them)

Here is how I have managed to build, with hugo 0.18.1, a bilingual website with:

english content in example.com
italian content in example.com/it 1
home pages and section indexes that are static markdown files
post archives in /YYYY/MM/post-title/
each page or post linked to its translation in the other language, when available
I organized content in this way:

content/_index.md
content/_index.it.md
content/section1/_index.md
content/section1/_index.it.md
content/section1/somepage.md
content/section1/somepage.it.md
content/archives/blogpost1.md
content/archives/blogpost1.it.md
the first two files become the home pages of the two languages, if you use a layouts/index.html that contains these commands:

<h2>{{ ( .Site.GetPage "home").Title }}</h2>
{{ ( .Site.GetPage "home").Content }}
to have hugo use the other _index.md files as home pages of the subsections, you have to have in layouts/_default/ a section.html file that is the same as the single.html file you use

links to translations are inserted by adding in the template the call to the translation partial mentioned in other posts of this page:

<div class="translations-bottom">
{{ partial "translations.html" . }}
</div>
Hugo knows which files are translations of each other by the language suffix in the filenames: see content organization above.

In order to have the permalinks I wanted, I wrote this, only once, at the top of the config file:

[permalinks]
   archives = "/:year/:month/:title/"
   section1 = "/section1/:title/"
   section2 = "/section2/:title/"
Finally, in the language sections at the end of the config file I wrote:

[Languages]
[Languages.en]
languageCode = "en-us"
languageName = "English"
title = "english title"
# english menu
[[Languages.en.menu.main]]
 name = "About"
 url = "about"
 weight = 1

[[Languages.en.menu.main]]
 name = "section1"
 url = "section1"
weight = 2
etc etc… and then a similar section for italian, with the menu urls like /it/about, /it/section1 etc…
