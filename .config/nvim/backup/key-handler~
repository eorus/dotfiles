#!/usr/bin/env bash

# Example for $XDG_CONFIG_HOME/sxiv/exec/key-handler
# Called by sxiv(1) after the external prefix key (C-x by default) is pressed.
# The next key combo is passed as its first argument. Passed via stdin are the
# images to act upon, one path per line: all marked images, if in thumbnail
# mode and at least one image has been marked, otherwise the current image.
# sxiv(1) blocks until this script terminates. It then checks which images
# have been modified and reloads them.

# The key combo argument has the following form: "[C-][M-][S-]KEY",
# where C/M/S indicate Ctrl/Meta(Alt)/Shift modifier states and KEY is the X
# keysym as listed in /usr/include/X11/keysymdef.h without the "XK_" prefix.

Trash="${HOME}/.local/share/Trash/files"    # Trash/Recycle Bin Folder
Temp="${HOME}/Pictures/Temp"                # Folder to collect files
ZenityWidth=600                             # Width of information window
ZenityHeight=800                            # Height of information window
ZenityFontSmall="monospace 10"              # Small text size for information window
ZenityFontLarge="monospace 12"              # Large text size for information window


help() {
    cat << EOF
SXIV Key-Handler Help

Thumbnail / Folder Navigation:
  o       Open current folder in thumbnails mode (sxiv -t)

Current Image Resize / Convert:
  C-r     Resize current image to width 1200px, quality 75
  C-c     Convert current image to WebP, width 1200px, quality 75

Zenity Prompt Resize / Convert (current image only):
  M-r     Resize current image with width prompt and optional filename
  M-c     Convert current image to WebP with width prompt and filename

Help & Manual:
  C-h   Show this help
  C-H   Show sxiv manual

Image Manipulation (marked images / current image):
  r       Rotate 90° in place
  R       Rotate 270° in place
  C-n     Negate colors
  f       Flip vertically

Clipboard:
  C-y     Copy current image to clipboard
  C-Y     Copy filenames of marked images to clipboard

Wallpaper / Colorscheme:
  C-w     Set current image as wallpaper (feh)
  C-W     Set current image as colorscheme (wpg)

External Apps:
  C-g     Open marked images in GIMP
  C-t     Open directory of current image in Thunar

File Management:
  t       Copy marked/current images to Temp folder
  d       Move marked/current images to Trash
  D       Delete marked/current images permanently
  s       Move marked/current images to Selected folder (organized by EXIF date)

Thumbnail / Folder Navigation:
  o       Open current folder in thumbnails mode (sxiv -t)

Current Image Resize / Convert:
  C-r     Resize current image to width 1200px, quality 75
  C-c     Convert current image to WebP, width 1200px, quality 75

Zenity Prompt Resize / Convert (current image only):
  M-r     Resize current image with width prompt and optional filename
  M-c     Convert current image to WebP with width prompt and filename
EOF
}

case "$1" in

    # show help
    "C-h")
        notify-send -t 5000 "sxiv key-handler help" "$(help)" ;;

    # show manual
    "C-H")
        $TERMINAL -e sh -c "man sxiv" &;;

    # rotate images 90' in place
    "r")
        while read -r filename; do
            convert -rotate 90 "$filename" "$filename" &&
                notify-send "$filename rotated for 90"
        done
        ;;

    # rotate images 270' in place
    "R")
        while read -r filename; do
            convert -rotate 270 "$filename" "$filename" &&
                notify-send "$filename rotated for 270°"
        done
        ;;

    # negate images in place
    "C-n")
        while read -r filename; do
            convert "$filename" -negate "$filename" &&
                notify-send "$filename negated its color"
        done
        ;;

    # flip images in place
    "f")
        while read -r filename; do
            convert -flip "$filename" "$filename" &&
                notify-send "$filename flipped"
        done
        ;;

    # copy single image to clipboard
    "C-y")
        read -r filename
        basename=$(basename "$filename")
        suffix=${basename##*.}
        echo "xclip -selection clipboard -t image/$suffix -i $filename" | xargs -I'{}' notify-send "debug" '{}'
        xclip -selection clipboard -t "image/$suffix" -i "$filename" && notify-send "Picture copied to clipboard" "$filename copied";;

    # copy image filenames to clipboard
    "C-Y")
        filenames=$(tr '\n' ' ') # it might not handle backslashes properly
        echo "$filenames" | xclip -selection clipboard &&
            notify-send "filenames copied" "$filenames"
        ;;

    # set *single* image as wallpaper using feh
    "C-w")
        read -r filename
        feh --bg-scale "$filename" && notify-send "Picture set as wallpaper" "$filename set as wallpaper using feh"
        ;;

    # set *single* image as colorscheme using wpg
    "C-W")
        read -r filename
        wpg -s "$filename" && notify-send "Picture set as colorscheme" "$filename set using wpg"
        ;;

    # open images using gimp
    "C-g")
        tr '\n' '\0' | xargs -0 gimp &;;

    # open directory
    "C-t")
        read -r filename
        dirname=$(dirname "$filename")
        thunar "$dirname" &;;

    "t")                                    # Collect files
        n=0
        if [ ! -d ${Temp} ]; then
            mkdir -p ${Temp}
            notify-send "Temp" "Could not find ${Temp}. Therefor it has been created."
        fi
        while read file; do
            cp ${file} ${Temp}
            ((n++))
        done
        notify-send "Collector" "${n} file(s) moved to ${Temp}."
        ;;

    "d")                                    # Delete (move to Trash directory)
        n=0
        if [ ! -d ${Trash} ]; then
            mkdir -p ${Trash}
            notify-send "Trash" "Could not find ${Trash}. Therefor it has been created."
        fi
        while read file; do
            mv ${file} ${Trash}
            ((n++))
        done
        notify-send "Move to Trash" "${n} file(s) moved to ${Trash}."
        ;;

    "D")                                    # Delete
        n=0
        while read file; do
            rm -rf ${file}
            ((n++))
        done
        notify-send "Delete" "${n} file(s) deleted permanently."
        ;;

    "g")                                    # Gimp
        n=0
        while read file; do
            gimp ${file} & disown
            ((n++))
        done
        notify-send "Gimp" "${n} file(s) opened with Gimp."
        ;;

    "o")  # open current folder in thumbnails
    read -r f
    [ -z "$f" ] && exit 0
    folder=$(dirname "$f")
    sxiv -t "$folder"/*
    ;;

    # Resize current image (in-place) to width 1200px, quality 75
    "C-r")
        read -r f
        [ -z "$f" ] && exit 0
        mogrify -resize 1200 -quality 75 "$f" &&
            notify-send "sxiv" "Resized $f to width 1200px"
        ;;

    # Convert current image to WebP, width 1200px, quality 75
    "C-c")
        read -r f
        [ -z "$f" ] && exit 0
        base=$(basename "$f")
        name="${base%.*}"
        dest="$(dirname "$f")/${name}.webp"
        convert "$f" -resize 1200 -quality 75 "$dest" &&
            notify-send "sxiv" "Converted $f → $dest"
        ;;

# Resize current image with zenity input
"M-r")
    read -r f
    [ -z "$f" ] && exit 0

    # Ask for width
    width=$(zenity --entry --title="Resize Width" --text="Enter new width (px)" --entry-text="1200")
    [ -z "$width" ] && width=1200

    # Ask for new filename (optional)
    newname=$(zenity --entry --title="New Filename" --text="Enter new filename (leave empty to overwrite)")
    if [ -n "$newname" ]; then
        dest="$(dirname "$f")/$newname"
        cp "$f" "$dest"
        f="$dest"
    fi

    mogrify -resize "${width}" -quality 75 "$f" &&
        notify-send "sxiv" "Resized $f to width ${width}px"
    ;;


"M-c")
    read -r f
    [ -z "$f" ] && exit 0

    width=$(zenity --entry --title="Resize Width" --text="Enter new width (px)" --entry-text="1200")
    [ -z "$width" ] && width=1200

    newname=$(zenity --entry --title="New Filename" --text="Enter new filename (leave empty for default .webp)")
    if [ -n "$newname" ]; then
        dest="$(dirname "$f")/$newname"
        [[ "${dest##*.}" != "webp" ]] && dest="$dest.webp"
    else
        base=$(basename "$f")
        name="${base%.*}"
        dest="$(dirname "$f")/${name}.webp"
    fi

    convert "$f" -resize "$width" -quality 75 "$dest" &&
        notify-send "sxiv" "Converted $f → $dest"
    ;;

    # move marked/current into Selected/ folder organized by EXIF date
    "s")
        n=0
        while read -r f; do
            [ -z "$f" ] && continue
            # Try to extract date, fallback to Unknown_Date
            date=$(exiftool -s3 -d "%Y-%m-%d" -DateTimeOriginal "$f" 2>/dev/null || echo "Unknown_Date")
            year=${date:0:4}
            dest="$HOME/Pictures/$year/$date/Selected"
            mkdir -p "$dest"
            mv -vn "$f" "$dest/"
            ((n++))
        done
        notify-send "sxiv" "$n file(s) moved to Selected/"
        ;;

# Google Photos–like auto-enhance current image
"C-a")
    read -r f
    [ -z "$f" ] && exit 0

    base="${f%.*}"
    ext="${f##*.}"
    dest="${base}_enhanced.${ext}"

    notify-send "sxiv" "Enhancing $f → $dest..."

    magick "$f" \
        -auto-level \
        -auto-gamma \
        -modulate 105,120,100 \
        -contrast-stretch 0 \
        -sharpen 0x1.0 \
        "$dest"

    notify-send "sxiv" "Enhancement done: $dest"
    ;;

esac
exit 0
