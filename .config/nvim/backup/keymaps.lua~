local map = vim.keymap.set
local opts = { noremap = true, silent = true }

-- FZF
map("n", "<leader>f", ":Files<CR>", opts)
map("n", "<leader>F", ":FZF ~<CR>", opts)
map("n", "<leader>l", ":Lines<CR>", opts)
if vim.fn.exists(":Rg") == 2 then
  map("n", "<leader>g", ":Rg<CR>", opts)
end
map("n", "<C-g>", ":Rg<CR>", opts)
map("n", "<F5>", ":Buffers<CR>", opts)             -- list buffers
map("n", "<leader>fh", ":History<CR>", opts)       -- recent files
map("n", "<leader>bb", ":Buffers<CR>", opts)       -- buffer switch
map("n", "<leader>ch", ":History:<CR>", opts)      -- command history
map("n", "<leader>sh", ":History/<CR>", opts)      -- search history
map("n", "<Esc>",      ":nohlsearch<CR>", opts)    -- Clear search highlights

------------------------------------------------------------
-- Oil (file manager)
------------------------------------------------------------
map("n", "-", "<cmd>Oil<CR>", opts)          -- open Oil in current dir
map("n", "<leader>e", "<cmd>Oil<CR>", opts)  -- open Oil as file explorer


-- Split navigation
map("n", "<C-h>", "<C-w>h", opts)
map("n", "<C-j>", "<C-w>j", opts)
map("n", "<C-k>", "<C-w>k", opts)
map("n", "<C-l>", "<C-w>l", opts)

-- adjust split sizes easier
map("n", "<C-Left>", ":vertical resize +3<CR>", opts) -- Control+Left resizes vertical split +
map("n", "<C-Right>", ":vertical resize -3<CR>", opts) -- Control+Right resizes vertical split -

-- Buffer navigation
map("n", "<S-Tab>", ":bnext<CR>", opts)
map("n", "<Tab>", ":bprevious<CR>", opts)
map("n", "<leader>B", ":enew<CR>", opts)
map("n", "<leader>bd", ":bd<CR>", opts)

-- Spell toggle
map("n", "<leader>ss", ":setlocal spell!<CR>", opts)

-- Vimwiki
map("n", "<C-d>", ":VimwikiMakeDiaryNote<CR>", opts)
if vim.fn.exists(":Calendar") == 2 then
  map("n", "<C-c>", function() vim.cmd(":Calendar") end, opts)
end

-- Undo tree
if vim.fn.exists(":UndotreeToggle") == 2 then
  map("n", "<leader>u", ":UndotreeToggle<CR>", opts)
end
  map("n", "<leader><F4>", ":UndotreeToggle<CR>", opts)

-- Colorizer toggle
if pcall(require, "colorizer") then
  map("n", "<leader>cc", ":ColorizerToggle<CR>", opts)
end

------------------------------------------------------------
-- Config & Save toolbox
------------------------------------------------------------
-- Save current buffer
map("n", "<leader>w", ":w<CR>", opts)

-- Open init.lua for editing
map("n", "<leader>v", "<Cmd>e $MYVIMRC<CR>", opts)
map("n", "<leader>ev", ":vsplit $MYVIMRC<CR>", opts)                  -- reload neovim config

-- Source current file (useful when editing any Lua module in ~/.config/nvim/lua/)
map("n", "<leader>er", ":source ~/.config/nvim/init.lua<CR>", opts)   -- reload neovim config

-- Reload full config (handy if you changed plugins.lua or lazy setup)
map("n", "<leader>vs", "<Cmd>source $MYVIMRC<CR>", opts)

-- Open Lua config folder with Oil
map("n", "<leader>vc", "<Cmd>Oil ~/.config/nvim/lua/<CR>", opts)


-- reload some configs

map("n", "<leader>eb", ":edit ~/.bashrc<CR>", opts)                   -- edit bashrc
map("n", "<leader>et", ":edit ~/.tmux.conf<CR>", opts)                -- edit tmux config
map("n", "<leader>en", ":edit ~/.config/newsboat/config<CR>", opts)   -- edit newsboat config
map("n", "<leader>eu", ":edit ~/.config/newsboat/urls<CR>", opts)     -- eidt newsboat url

------------------------------------------------------------
-- Cheat sheet popup (plugin-free with icons)
------------------------------------------------------------

map("n", "<leader><F1>", function()
  -- create an unlisted scratch buffer
  local buf = vim.api.nvim_create_buf(false, true)
  vim.api.nvim_buf_set_option(buf, "buftype", "nofile")
  vim.api.nvim_buf_set_option(buf, "bufhidden", "wipe")
  vim.api.nvim_buf_set_option(buf, "swapfile", false)
  vim.api.nvim_buf_set_option(buf, "modifiable", true)


  local lines = {
    "================= üìù Neovim Keymaps =================",
    "",
    "üîç FZF / Telescope:",
    "  <leader>f   ‚Üí Files (find files)",
    "  <leader>F   ‚Üí FZF in home (~)",
    "  <leader>l   ‚Üí Lines",
    "  <C-g>       ‚Üí Rg (live grep) -- only if :Rg exists",
    "  <F5>        ‚Üí Buffers (list open buffers)",
    "  <leader>fh  ‚Üí History (recent files)",
    "  <leader>bb  ‚Üí Buffers (buffer switch)",
    "  <leader>ch  ‚Üí History: (command history)",
    "  <leader>sh  ‚Üí History/ (search history)",
    "",
    "üìÇ Oil.nvim (file manager):",
    "  -           ‚Üí Open Oil (current dir)",
    "  <leader>e   ‚Üí Open Oil (file explorer)",
    "  <CR>        ‚Üí Open file / enter folder",
    "  <BS>        ‚Üí Go up directory",
    "  C           ‚Üí Create file/folder",
    "  D           ‚Üí Delete file/folder",
    "  r           ‚Üí Rename file/folder",
    "  R           ‚Üí Refresh buffer",
    "",
    "üìê Split navigation:",
    "  <C-h> <C-j> <C-k> <C-l> ‚Üí Move between splits",
    "",
    "üóÇ Buffer navigation:",
    "  <S-Tab> ‚Üí Next buffer",
    "  <Tab>   ‚Üí Previous buffer",
    "  <leader>B ‚Üí New empty buffer (enew)",
    "  <leader>bd ‚Üí Close buffer (bd)",
    "",
    "üî§ Spell / üåà Color:",
    "  <leader>ss ‚Üí Toggle spell check (setlocal spell!)",
    "  <leader>cc ‚Üí Toggle colorizer (if colorizer present)",
    "",
    "üìñ Vimwiki:",
    "  <C-d> ‚Üí Make diary note (VimwikiMakeDiaryNote)",
    "  <C-c> ‚Üí Calendar (if :Calendar exists)",
    "",
    "‚è™ Undo tree:",
    "  <leader>u / <leader><F4> ‚Üí Toggle Undotree (if available)",
    "",
    "‚öôÔ∏è Config & Save:",
    "  <leader>w   ‚Üí Save buffer (:w)",
    "  <leader>v   ‚Üí Edit init.lua ($MYVIMRC)",
    "  <leader>o   ‚Üí Update & source $MYVIMRC (normal+visual)",
    "  <leader>sv  ‚Üí Update & luafile % (source current Lua file)",
    "  <leader>vs  ‚Üí Source $MYVIMRC (reload full config)",
    "  <leader>vc  ‚Üí Open Lua config folder with Oil (~/.config/nvim/lua/)",
    "",
    "----------------------------------------------------",
  }

  vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)
  vim.api.nvim_buf_set_option(buf, "modifiable", false)
  vim.api.nvim_buf_set_option(buf, "filetype", "help") -- optional styling

  -- compute size (auto with caps)
  local ui = vim.api.nvim_list_uis()[1]
  local max_w, max_h = 80, 24
  local pad = 6
  local content_w = 0
  for _, l in ipairs(lines) do
    local len = vim.fn.strdisplaywidth(l)
    if len > content_w then content_w = len end
  end
  local width = math.min(content_w + pad, math.min(max_w, math.floor(ui.width * 0.8)))
  local height = math.min(#lines + 2, math.min(max_h, math.floor(ui.height * 0.8)))

  local row = math.floor((ui.height - height) / 2)
  local col = math.floor((ui.width - width) / 2)

  -- create floating window
  local win = vim.api.nvim_open_win(buf, true, {
    relative = "editor",
    width = width,
    height = height,
    row = row,
    col = col,
    style = "minimal",
    border = "rounded",
  })

  -- window options
  vim.api.nvim_win_set_option(win, "wrap", false)
  vim.api.nvim_win_set_option(win, "cursorline", false)

  -- keymaps to close the float with q or <Esc>
  local opts_local = { nowait = true, noremap = true, silent = true }
  vim.keymap.set("n", "q", function()
    if vim.api.nvim_win_is_valid(win) then vim.api.nvim_win_close(win, true) end
  end, vim.tbl_extend("force", opts_local, { buffer = buf }))

  vim.keymap.set("n", "<Esc>", function()
    if vim.api.nvim_win_is_valid(win) then vim.api.nvim_win_close(win, true) end
  end, vim.tbl_extend("force", opts_local, { buffer = buf }))

  -- also allow <Esc> in terminal-mode/visual if needed by mapping to buffer-local normal-mode close
  -- ensure buffer is not listed
  vim.api.nvim_buf_set_option(buf, "buflisted", false)
end, opts)
