local opt = vim.opt

-- Basic settings
opt.encoding = "utf-8"
opt.number = true
opt.relativenumber = true
opt.cursorline = true
opt.tabstop = 2
opt.shiftwidth = 2
opt.softtabstop = 2
opt.expandtab = true
opt.smartindent = true
opt.ignorecase = true
opt.smartcase = true
opt.clipboard = "unnamedplus"
opt.termguicolors = true
opt.splitbelow = true
opt.splitright = true
opt.mouse = "a"
opt.hidden = true
opt.autoread = true
opt.updatetime = 300
opt.shortmess:append("c")  -- reduce completion messages

-- Undo / Backup
local undodir = vim.fn.stdpath("config") .. "/undo"
if vim.fn.isdirectory(undodir) == 0 then vim.fn.mkdir(undodir, "p") end
opt.undodir = undodir
opt.undofile = true
opt.undoreload = 10000

local backupdir = vim.fn.stdpath("config") .. "/backup"
if vim.fn.isdirectory(backupdir) == 0 then vim.fn.mkdir(backupdir, "p") end
opt.backup = true
opt.backupdir = backupdir

-- Autoformat / remove trailing whitespace
vim.api.nvim_create_autocmd("BufWritePre", {
  pattern = "*",
  callback = function()
    vim.cmd [[%s/\s\+$//e]]
    vim.cmd [[%s/\n\+\%$//e]]
  end
})

-- Keep splits neat on resize
vim.api.nvim_create_autocmd("VimResized", {
  pattern = "*",
  command = "wincmd ="
})

-- Vimwiki convenience
vim.g.instant_markdown_autostart = 0  -- disable auto-start
function ToggleCalendar()
  vim.cmd(":Calendar")
  if vim.g.calendar_open == nil then
    vim.g.calendar_open = 1
  else
    if vim.g.calendar_open == 1 then
      vim.cmd("q")
      vim.g.calendar_open = nil
    else
      vim.g.calendar_open = 1
    end
  end
end

-- Auto-reload Xresources/Xdefaults if edited
vim.api.nvim_create_autocmd("BufWritePost", {
  pattern = {"*Xresources","*Xdefaults"},
  command = "!xrdb %"
})
